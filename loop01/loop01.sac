/*******************************************************************************
 *
 * Livermore Loop no 1
 *
 * Hydro Fragment
 * Parallel Algorithm
 *
 *  We have to ensure that the loop is "different" each iteration,
 *  so introduce the variable nolir.
 *
 * 3. Similar changes have been made to the C version of loop01.
 *
 *******************************************************************************/

use StdIO: all;
use Array: all;
use RTimer: all;


#ifndef VARIANT
#define VARIANT APL2
#endif

#ifndef INLINE
#define LL_INLINE
#else
#define LL_INLINE inline
#endif

#define APPEND(v) Loop1_ ## v
#define FULL(v) APPEND(v)
#define LOOP FULL( VARIANT)

#define STR(s) #s
#define STRING(s) STR(s)


#ifndef SIZE
#define SIZE 1001
#endif

/*
 * Note here, that the use of nolir differs in the different variants!
 * However, since this is artificial for enabling repetitive calls to
 * the loop function, we are happy to ignore that as long as it only afects
 * the values between x[n] and x[SIZE-1]!
 */
LL_INLINE
double[.] Loop1_APL1(int nolir, int n, double q, double r, double t,
                        double[SIZE] y, double[SIZE] z)
{
  val =  ( q + ( take([n], y) * ( r * take( [n], drop( [10], z))
                               + t * take( [n], drop( [11], z))))) ++ genarray( [11], tod(nolir));
  return(val);
}

LL_INLINE
double[.] Loop1_APL2(int nolir, int n, double q, double r, double t,
                        double[SIZE] y, double[SIZE] z)
{
  return q + y * ( r * shift( [-10], tod(nolir), z) + t * shift( [-11], tod(nolir), z));
}

LL_INLINE
double[.] Loop1_TC1( int nolir, int n, double q, double r, double t,
                    double[SIZE] y, double[SIZE] z)
{
  return with {
           ( [0] <= [k] < [n]) : q + y[k] * (r*z[k+10] + t*z[k+11]);
         } : genarray( [SIZE], tod(nolir));
}

LL_INLINE
double[.] Loop1_TC2( int nolir, int n, double q, double r, double t,
                    double[SIZE] y, double[SIZE] z)
{
  return { k -> q + y[k] * (r * shift( [-10], tod(nolir), z)[k]
                            + t*shift( [-11], tod(nolir), z)[k]) };
}


inline double[.] genArray(int size)
{
  A = tod( 1 + iota(size));
  return(A);
}


int main ()
{
  double[ SIZE] y;

  timer = createRTimer();

  rep = (int) FibreScanIntArray();             /* 500000 */

  n = SIZE - 11;
  q = 1.6;
  r = 9.4;
  t = 5.8;
  y = genArray( SIZE);
  z = y;
  x = y;

  printf( "Running " STRING( LOOP) "\n");
  printf( "Number of repetitions: %d\n", rep);
  printf( "Vector length        : %d\n", SIZE);
  printf( "Upper limit (n)      : %d\n", n);

  startRTimer( timer);
  for (i=0; i<rep; i++){
    y = LOOP( i, n, q, r, t, y, z);
  }
  stopRTimer( timer);

  printf( "The sum of the first element is : %f\n", sum (y));

  numFlops = tod(rep)*tod(n)*5.0;

  printf( "Wall Clock Time spent           : %6.3f secs\n", getRTimerDbl( timer));
  printf( "Computer Performance achieved   : %6.2f GFlops\n", (tod(numFlops)/1000000000.0) / getRTimerDbl( timer));
  
  return( 0);
}

