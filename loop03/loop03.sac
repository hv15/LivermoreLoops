/*******************************************************************************
 *
 * Livermore Loop no 3
 *
 * Inner Product on vectors.
 *
 *******************************************************************************/

use StdIO: all;
use Array: all;
use RTimer: all;


#ifndef VARIANT
#define VARIANT APL
#endif

#ifndef INLINE
#define LL_INLINE
#else
#define LL_INLINE inline
#endif

#define APPEND(v) Loop3_ ## v
#define FULL(v) APPEND(v)
#define LOOP FULL( VARIANT)

#define STR(s) #s
#define STRING(s) STR(s)


#ifndef SIZE
#define SIZE 1001
#endif

/*
 * Note here, that the addition of nolir is artificial. It enables 
 * repetitive calls to the loop function to be actually executed.
 */
LL_INLINE
double Loop3_N(int nolir, int n, double[SIZE] z, double[SIZE] x)
{
  val =  with {
           ([0] <= iv < [n]) : z[iv] * x[iv];
         } : fold( +, 0d);
  return tod(nolir) + val;
}

LL_INLINE
double Loop3_APL(int nolir, int n, double[SIZE] z, double[SIZE] x)
{
  return tod(nolir) + sum( z*x);
}

LL_INLINE
double Loop3_TC( int nolir, int n, double[SIZE] z, double[SIZE] x)
{
  return tod(nolir) + sum( { iv -> z[iv] * x[iv] });
}


inline double[.] genArray(int size)
{
  A = tod( 1 + iota(size));
  return(A);
}


int main ()
{
  double[ SIZE] z;

  timer = createRTimer();

  rep = (int) FibreScanIntArray();             /* 500000 */

  n = SIZE;
  z = genArray( SIZE);
  x = z;

  printf( "Running " STRING( LOOP) "\n");
  printf( "Number of repetitions: %d\n", rep);
  printf( "Vector length        : %d\n", SIZE);

  startRTimer( timer);
  noLir = 0.0;
  for (i=0; i<rep; i++){
    noLir += LOOP( i, n, z, x);
  }
  stopRTimer( timer);

  printf( "The sum of the sums is : %f\n", noLir);

  numFlops = tod(rep)*tod(n)*2.0;

  printf( "Wall Clock Time spent           : %6.3f secs\n", getRTimerDbl( timer));
  printf( "Computer Performance achieved   : %6.2f GFlops\n", (tod(numFlops)/1000000000.0) / getRTimerDbl( timer));
  
  return( 0);
}

