/*******************************************************************************
 *
 * Livermore Loop no 8
 *
 * ADI integration - splitting the original 3d array of shape [2,101,5] 
 * into two arrays of shape [101,5]
 *
 *******************************************************************************/

use StdIO: all;
use Array: all;
use RTimer: all;


#ifndef VARIANT
#define VARIANT C
#endif

#ifndef INLINE
#define LL_INLINE
#else
#define LL_INLINE inline
#endif

#define APPEND(v) Loop8_ ## v
#define FULL(v) APPEND(v)
#define LOOP FULL( VARIANT)

#define STR(s) #s
#define STRING(s) STR(s)


#ifndef SIZE1
#define SIZE1 101
#endif

#ifndef SIZE2
#define SIZE2 5
#endif

LL_INLINE
double[.,.], double[.,.], double[.,.]
Loop8_C( int n, double[10] consts, double[SIZE1,SIZE2] u1,
                                   double[SIZE1,SIZE2] u2,
                                   double[SIZE1,SIZE2] u3)
{
  a11=consts[0];
  a12=consts[1];
  a13=consts[2];
  a21=consts[3];
  a22=consts[4];
  a23=consts[5];
  a31=consts[6];
  a32=consts[7];
  a33=consts[8];
  sig=consts[9];
  du1 = genarray( [n], 0d);
  du2 = du1;
  du3 = du1;
  u1n = u1;
  u2n = u2;
  u3n = u3;
  for ( kx=1 ; kx<3 ; kx++ ){
    for ( ky=1 ; ky<n ; ky++ ) {
      du1[ky] = u1[ky+1,kx] - u1[ky-1,kx];
      du2[ky] = u2[ky+1,kx] - u2[ky-1,kx];
      du3[ky] = u3[ky+1,kx] - u3[ky-1,kx];
      u1n[ky,kx]= u1[ky,kx]+a11*du1[ky]+a12*du2[ky]+a13*du3[ky] + sig*
                     (u1[ky,kx+1]-2.0*u1[ky,kx]+u1[ky,kx-1]);
      u2n[ky,kx]= u2[ky,kx]+a21*du1[ky]+a22*du2[ky]+a23*du3[ky] + sig*
                     (u2[ky,kx+1]-2.0*u2[ky,kx]+u2[ky,kx-1]);
      u3n[ky,kx]= u3[ky,kx]+a31*du1[ky]+a32*du2[ky]+a33*du3[ky] + sig*
                     (u3[ky,kx+1]-2.0*u3[ky,kx]+u3[ky,kx-1]);
    }
  }
  return (u1n,u2n,u3n);
}

LL_INLINE
double[.,.], double[.,.], double[.,.]
Loop8_NAIVE( int n, double[10] consts, double[SIZE1,SIZE2] u1,
                                       double[SIZE1,SIZE2] u2,
                                       double[SIZE1,SIZE2] u3)
{

  a11=consts[0];
  a12=consts[1];
  a13=consts[2];
  a21=consts[3];
  a22=consts[4];
  a23=consts[5];
  a31=consts[6];
  a32=consts[7];
  a33=consts[8];
  sig=consts[9];

  du1 = with {
          (. <= [ky,kx] <= .) : u1[ky+2,kx+1] - u1[ky,kx+1];
        } : genarray( [n-1,2], 0d);
  du2 = with {
          (. <= [ky,kx] <= .) : u2[ky+2,kx+1] - u2[ky,kx+1];
        } : genarray( [n-1,2], 0d);
  du3 = with {
          (. <= [ky,kx] <= .) : u3[ky+2,kx+1] - u3[ky,kx+1];
        } : genarray( [n-1,2], 0d);
  u1p = with {
         ([1,1] <= [ky,kx] < [n,3]) 
         : u1[ky,kx]+a11*du1[ky-1,kx-1]+a12*du2[ky-1,kx-1]+a13*du3[ky-1,kx-1] + sig*
                     (u1[ky,kx+1]-2.0*u1[ky,kx]+u1[ky,kx-1]);
       } : modarray( u1);
  u2p = with {
         ([1,1] <= [ky,kx] < [n,3]) 
         : u2[ky,kx]+a21*du1[ky-1,kx-1]+a22*du2[ky-1,kx-1]+a23*du3[ky-1,kx-1] + sig*
                     (u2[ky,kx+1]-2.0*u2[ky,kx]+u2[ky,kx-1]);
       } : modarray( u2);
  u3p = with {
         ([1,1] <= [ky,kx] < [n,3]) 
         : u3[ky,kx]+a31*du1[ky-1,kx-1]+a32*du2[ky-1,kx-1]+a33*du3[ky-1,kx-1] + sig*
                     (u3[ky,kx+1]-2.0*u3[ky,kx]+u3[ky,kx-1]);
       } : modarray( u3);
  return (u1p,u2p,u3p);
}

LL_INLINE
double[.,.], double[.,.], double[.,.]
Loop8_NAIVE2( int n, double[10] consts, double[SIZE1,SIZE2] u1,
                                        double[SIZE1,SIZE2] u2,
                                        double[SIZE1,SIZE2] u3)
{

  a11=consts[0];
  a12=consts[1];
  a13=consts[2];
  a21=consts[3];
  a22=consts[4];
  a23=consts[5];
  a31=consts[6];
  a32=consts[7];
  a33=consts[8];
  sig=consts[9];

  u1n = u1;
  u2n = u2;
  u3n = u3;

  for ( kx=1 ; kx<3 ; kx++ ){
    du1 = with {
            (. <= [ky] <= .) : u1[ky+2,kx] - u1[ky,kx];
          } : genarray( [n-1], 0d);
    du2 = with {
            (. <= [ky] <= .) : u2[ky+2,kx] - u2[ky,kx];
          } : genarray( [n-1], 0d);
    du3 = with {
            (. <= [ky] <= .) : u3[ky+2,kx] - u3[ky,kx];
          } : genarray( [n-1], 0d);
    u1n = with {
           ([1,kx] <= [ky,kx] < [n,kx+1])
           : u1[ky,kx]+a11*du1[ky-1]+a12*du2[ky-1]+a13*du3[ky-1] + sig*
                       (u1[ky,kx+1]-2.0*u1[ky,kx]+u1[ky,kx-1]);
         } : modarray( u1);
    u2n = with {
           ([1,kx] <= [ky,kx] < [n,kx+1])
           : u2[ky,kx]+a21*du1[ky-1]+a22*du2[ky-1]+a23*du3[ky-1] + sig*
                       (u2[ky,kx+1]-2.0*u2[ky,kx]+u2[ky,kx-1]);
         } : modarray( u2);
    u3n = with {
           ([1,kx] <= [ky,kx] < [n,kx+1])
           : u3[ky,kx]+a31*du1[ky-1]+a32*du2[ky-1]+a33*du3[ky-1] + sig*
                       (u3[ky,kx+1]-2.0*u3[ky,kx]+u3[ky,kx-1]);
         } : modarray( u3);
  }
  return (u1n,u2n,u3n);
}

LL_INLINE
double[.,.], double[.,.], double[.,.]
Loop8_APL( int n, double[10] consts, double[SIZE1,SIZE2] u1,
                                     double[SIZE1,SIZE2] u2,
                                     double[SIZE1,SIZE2] u3)
{
  a11=consts[0];
  a12=consts[1];
  a13=consts[2];
  a21=consts[3];
  a22=consts[4];
  a23=consts[5];
  a31=consts[6];
  a32=consts[7];
  a33=consts[8];
  sig=consts[9];

  du1 = shift([-1,0], u1) - shift([1,0], u1);
  du2 = shift([-1,0], u2) - shift([1,0], u2);
  du3 = shift([-1,0], u3) - shift([1,0], u3);

  /*
   * Note here that we compute over the entire 5 elements in the thirdaxis , rather than
   * only the two above....
   */
  u1n = u1 + a11*du1 + a12*du2 + a13*du3
            + sig * ( shift( [0,-1], u1) - 2.0*u1 + shift( [0,1], u1));
  u2n = u2 + a21*du1 + a22*du2 + a23*du3
            + sig * ( shift( [0,-1], u2) - 2.0*u2 + shift( [0,1], u2));
  u3n = u3 + a31*du1 + a32*du2 + a33*du3
            + sig * ( shift( [0,-1], u3) - 2.0*u3 + shift( [0,1], u3));

  return (u1n,u2n,u3n);
}

inline double[.] genArray(int size)
{
  A = tod( 1 + iota(size));
  return(A);
}


int main ()
{
  double[ SIZE1, SIZE2] u1;
  double[ SIZE1, SIZE2] u2;
  double[ SIZE1, SIZE2] u3;

  timer = createRTimer();

  rep = (int) FibreScanIntArray();
  n = SIZE1-1;
  consts = [1.2, 5.6, 8.1, 9.8, 1.5, 4.0, 0.5, 7.9, 6.4, 3.9];

  u1 = reshape( [SIZE1,SIZE2], genArray( SIZE1*SIZE2));
  u2 = u1;
  u3 = u1;

  printf( "Running " STRING( LOOP) "\n");
  printf( "Number of repetitions: %d\n", rep);
  printf( "Iteration space size : %d\n", n);

  startRTimer( timer);
  for (i=0; i<rep; i++){
    u1, u2, u3 = LOOP( n, consts, u1, u2, u3);
  }
  stopRTimer( timer);

  printf( "Element [1] of the result is : %f\n", u1[1,1]);

  numFlops = tod(rep)*tod(2)*tod(n-1)*tod(36);

  printf( "Wall Clock Time spent           : %7.3f secs\n", getRTimerDbl( timer));
  printf( "Computer Performance achieved   : %7.3f GFlops/s\n", (tod(numFlops)/1000000000.0) / getRTimerDbl( timer));
  
  return( 0);
}

