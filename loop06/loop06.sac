/*******************************************************************************
 *
 * Livermore Loop no 6
 *
 * general linear recurrence equations
 *
 *******************************************************************************/

use StdIO: all;
use Array: all;
use RTimer: all;


#ifndef VARIANT
#define VARIANT C
#endif

#ifndef INLINE
#define LL_INLINE
#else
#define LL_INLINE inline
#endif

#define APPEND(v) Loop6_ ## v
#define FULL(v) APPEND(v)
#define LOOP FULL( VARIANT)

#define STR(s) #s
#define STRING(s) STR(s)


#ifndef SIZE
#define SIZE 1001
#endif

#ifndef SIZE2
#define SIZE2 64
#endif

LL_INLINE
double[.] Loop6_C( int n, double[SIZE] w, double[SIZE2,SIZE2] b)
{
  for( i=1 ; i<n ; i++ ) {
    for ( k=0 ; k<i ; k++ ) {
      w[i] += b[i,k] * w[(i-k)-1];
    }
  }
  return w;
}

LL_INLINE
double[.] Loop6_NAIVE( int n, double[SIZE] w, double[SIZE2,SIZE2] b)
{
  for( i=1; i< n; i++) {

    v = with {
          ( [0] <= [k] < [i] ) : b[[i,k]] * w[[(i-k)-1]];
        } : fold( +, 0d );

    w[[i]] = w[[i]] + v;
  }
  return w;
}

LL_INLINE
double[.] Loop6_TC( int n, double[SIZE] w, double[SIZE2,SIZE2] b)
{
  for( i=1; i< n; i++) {
    w[i] += sum( with { 
                   ([0] <= [k] <[i]) : b[[i,k]] * w[[(i-k)-1]];
                 } : genarray([i], 0d) );
  }
  return w;
}

LL_INLINE
double[.] Loop6_APL( int n, double[SIZE] w, double[SIZE2,SIZE2] b)
{
  for( i=1; i< n; i++) {
    w[i] += sum( b[[i]] * take( [SIZE2], reverse( shift( [SIZE-i], w))));
  }
  return w;
}


inline double[.] genArray(int size)
{
  A = 1d / tod( 1 + iota(size));
  return(A);
}


int main ()
{
  double[ SIZE] w;
  double[ SIZE2, SIZE2] b;

  timer = createRTimer();

  rep = (int) FibreScanIntArray();
  n = SIZE2;

  w = genArray( SIZE);
  b = reshape( [SIZE2,SIZE2], genArray(SIZE2*SIZE2));

  printf( "Running " STRING( LOOP) "\n");
  printf( "Number of repetitions: %d\n", rep);
  printf( "Vector length (n)    : %d\n", n);

  startRTimer( timer);
  noLir = 0.0;
  for (i=0; i<rep; i++){
    w = LOOP( n, w, b);
  }
  stopRTimer( timer);

  printf( "Element [1] of the result is : %f\n", w[1]);

  numFlops = tod(rep)*tod(n*(n+1));

  printf( "Wall Clock Time spent           : %7.3f secs\n", getRTimerDbl( timer));
  printf( "Computer Performance achieved   : %7.3f GFlops/s\n", (tod(numFlops)/1000000000.0) / getRTimerDbl( timer));
  
  return( 0);
}

